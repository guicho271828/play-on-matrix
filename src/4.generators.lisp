(in-package :play-on-matrix)

(defun make-unroll-gemm (x y z)
  (check-type x integer)
  (check-type y integer)
  (check-type z integer)
  (compile nil
           `(lambda (ma mb mc)
              (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))
              (declare (type (matrix 500 500) ma mb mc))
              (let ((rows (array-dimension ma 0))
                    (cols (array-dimension mb 1)))
                (declare (type fixnum rows cols))
                (dotimes-unroll (row rows ,x)
                  (dotimes-unroll (col cols ,y)
                    (let ((cell (aref mc row col))
                          (ma-index (array-row-major-index ma row 0))
                          (mb-index (array-row-major-index mb 0 col)))
                      (declare (type (single-float) cell))
                      (declare (type fixnum ma-index mb-index))
                      (dotimes-unroll (k cols ,z)
                        (incf cell (* (row-major-aref ma ma-index)
                                      (row-major-aref mb mb-index)))
                        (incf ma-index)
                        (incf mb-index cols))
                      (setf (aref mc row col) cell))))
                mc))))

(defun make-unroll-gemm-k (x y z)
  (check-type x integer)
  (check-type y integer)
  (check-type z integer)
  (compile nil
           `(lambda (ma mb mc)
              (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))
              (declare (type (matrix 500 500) ma mb mc))
              (let ((rows (array-dimension ma 0))
                    (cols (array-dimension mb 1)))
                (declare (type fixnum rows cols))
                (dotimes-unroll2 (row rows ,x) ()
                  (dotimes-unroll2 (k cols ,y) ()
                    (let ((cell (aref ma row k)))
                      (dotimes-unroll2 (col cols ,z) ((mb-index (array-row-major-index mb k 0))
                                                     (mc-index (array-row-major-index mc row 0)))
                        (incf (row-major-aref mc mc-index)
                              (* cell (row-major-aref mb mb-index)))))))
                mc))))

(defun make-unroll-gemm-k2 (x y z)
  (check-type x integer)
  (check-type y integer)
  (check-type z integer)
  (compile nil
           `(lambda (ma mb mc)
              (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))
              (declare (type (matrix 500 500) ma mb mc))
              (symbol-macrolet ((ui ,x) (uk ,y) (uj ,z))
                (let ((rows (array-dimension ma 0))
                      (cols (array-dimension mb 1)))
                  (declare (type fixnum rows cols))
                  ;; (dotimes-unroll3 ((row) (rows ui)) ()
                  ;;   (dotimes-unroll3 ((k) (cols uk)) ()
                  (dotimes (row rows)
                    (dotimes (k cols)
                      (let ((cell (aref ma row k))
                            (mb-index (array-row-major-index mb k 0))
                            (mc-index (array-row-major-index mc row 0)))
                        (declare (type fixnum mb-index mc-index))
                        (dotimes-unroll3 ((col delta) (cols uj))
                            ((incf mb-index delta)
                             (incf mc-index delta))
                          (sb-kernel:data-vector-set-with-offset
                           (sb-kernel:%array-data-vector mc) mc-index col
                           (+ (sb-kernel:data-vector-ref-with-offset
                               (sb-kernel:%array-data-vector mc) mc-index col)
                              (* cell (sb-kernel:data-vector-ref-with-offset
                                       (sb-kernel:%array-data-vector mb) mb-index col)))))))))))))

