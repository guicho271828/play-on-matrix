(in-package :play-on-matrix)

;;; keens+gos-k

(defun simple-gemm (ma mb mc)
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare (type matrix ma mb mc))
  (let ((rows (array-dimension ma 0))
        (cols (array-dimension mb 1)))
    (declare (type fixnum rows cols))
    (dotimes (row rows)
      (dotimes (col cols)
        (dotimes (k cols)
          (incf (aref mc row col)
                (* (aref ma row k) (aref mb k col))))))
    mc))

(defun row-major-gemm (ma mb mc)
  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))
  (declare (type matrix ma mb mc))
  (let ((rows (array-dimension ma 0))
        (cols (array-dimension mb 1)))
    (declare (type fixnum rows cols))
    (dotimes (row rows)
      (dotimes (col cols)
        (let ((cell (aref mc row col))
              (ma-index (array-row-major-index ma row 0))
              (mb-index (array-row-major-index mb 0 col)))
          (declare (type (single-float) cell))
          (declare (type fixnum ma-index mb-index))
          (dotimes (k cols)
            (incf cell (* (row-major-aref ma ma-index)
                          (row-major-aref mb mb-index)))
            (incf ma-index)
            (incf mb-index cols))
          (setf (aref mc row col) cell))))
    mc))

(defun rm-gemm+static-size (ma mb mc)
  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))
  (declare (type (matrix 500 500) ma mb mc))
  (let ((rows (array-dimension ma 0))
        (cols (array-dimension mb 1)))
    (declare (type fixnum rows cols))
    (dotimes (row rows)
      (dotimes (col cols)
        (let ((cell (aref mc row col))
              (ma-index (array-row-major-index ma row 0))
              (mb-index (array-row-major-index mb 0 col)))
          (declare (type (single-float) cell))
          (declare (type fixnum ma-index mb-index))
          (dotimes (k cols)
            (incf cell (* (row-major-aref ma ma-index)
                          (row-major-aref mb mb-index)))
            (incf ma-index)
            (incf mb-index cols))
          (setf (aref mc row col) cell))))
    mc))

(defun rm-gemm+static-size+unroll (ma mb mc)
  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))
  (declare (type (matrix 500 500) ma mb mc))
  (let ((rows (array-dimension ma 0))
        (cols (array-dimension mb 1)))
    (declare (type fixnum rows cols))
    (dotimes (row rows)
      (dotimes (col cols)
        (let ((cell (aref mc row col))
              (ma-index (array-row-major-index ma row 0))
              (mb-index (array-row-major-index mb 0 col)))
          (declare (type (single-float) cell))
          (declare (type fixnum ma-index mb-index))
          (dotimes-unroll (k cols 2)
            (incf cell (* (row-major-aref ma ma-index)
                          (row-major-aref mb mb-index)))
            (incf ma-index)
            (incf mb-index cols))
          (setf (aref mc row col) cell))))
    mc))

